cls_list
class(cls_list)
as.character(cls_list)
cls_vect = sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
class(flag_colors)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
head(flag_shapes)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
str(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, 1, 0.7
)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
dl
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days"
)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = )
?plot
plot(cars, main = "My Plot")
?plot
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?PAR
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play
play()
dim(mtcars)
str(mtcars)
names(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
library(datasets)
data(iris)
?iris
str(iris)
tapply(iris$Sepal.Width, iris$Species, mean)
lapply(iris, mean)
lapply(iris[,1:4], mean)
sapply(iris[,1:4], mean)
?apply
apply(iris[,1:4], 2, mean)
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
split(mtcars$hp, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl),mean)
foo <- sapply(split(mtcars$hp, mtcars$cyl),mean)
class(foo)
foo
abs(foo$8 - foo$4)
foo
foo$8
foo["8"]
abs(foo["8"] - foo["4"])
debug(ls)
ls
ls()
ecit
exit
library(datasets)
data(iris)
str(iris)
apply(iris, mean)
split(iris$Sepal.Length, iris$Species)
apply(split(iris$Sepal.Length, iris$Species), mean)
tapply(iris$Sepal.Length, iris$Species, mean)
data(mtcars)
set.seed(1)
rpois(5,2)
install.packages(httr)
library(httr)
myapp <- oauth_app("github", key="63745d29bd074a4effc4", secret = "b91b9afed6e50e30fa608395399fba10669e6c8f")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
gtoken <- config(token = github_token)
gtoken
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
stop_for_status(req)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "63745d29bd074a4effc4", secret = "b91b9afed6e50e30fa608395399fba10669e6c8f")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
library(httr)
myapp <- oauth_app("quiz2", key = "aecade698df47ab71906", secret = "610f1ab7a11597d885ee1f5e5cd08a7b7e7f23b0")
github_token <- oauth2.0_token(oauth_endpoints("quiz2"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("quiz2", key = "aecade698df47ab71906", secret = "610f1ab7a11597d885ee1f5e5cd08a7b7e7f23b0", cache = FALSE)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "c896d8ce983d089831bd", secret = "307d860d8225a312935de23c689dbea0a83deec9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
foo <- url("https://api.github.com/users/jtleek/repos?error=redirect_uri_mismatch&error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch")
foo <- url("https://api.github.com/users/jtleek/repos?error=redirect_uri_mismatch&error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&error_uri=https%3A%2F%2Fdeveloper.github.com%2Fv3%2Foauth%2F%23redirect-uri-mismatch", method = "curl")
library(swirl)
swirl()
quit
bye()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_gb = size_mb/2^10)
cran3
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
studentws
students
?gather
gather(student, sex, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count,-grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submti()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric(class5)
extract_numeric("class5")
submit()
sudents4
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?select
?gather
?separate
submit()
?group_by
submit()
swirl()
library(swirl)
swirl()
Sys.getlocale()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minute = 29)
this_moment <- update(this_moment, hours = 8, minutes = 29)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tx
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
setwd("~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project")
list.files()
setwd(paste(getwd(),"UCI HAR Dataset",sep = "/"))
getwd()
list.files()
foo <- read.table("features.txt")
foo
columns <- c(1:6,41:46,81:86,121:126,161:166,201:202,214:215,227:228,
240:241,253:254,266:271,345:350,424:429,503:504,516:517,
529:530,542:543)
col_names <- foo[columns, 2]
col_names
col_names <- sub("^t","time.",col_names)
col_names
col_names <- sub("^f","freq.",col_names)
col_names
col_names <- sub("Acc","Accelerometer",col_names)
col_names
col_names <- sub("Gyro","Gryoscope",col_names)
col_names <- sub("Mag","Magnitude",col_names)
col_names <- sub("-mean()-",".mean.",col_names)
col_names <- sub("-std()-",".std.",col_names)
col_names
col_names <- sub("BodyBody","Body",col_names)
col_names
col_names <- sub("-mean()-","/.mean/.",col_names)
col_names
col_names <- sub("mean()","mean",col_names)
col_names
col_names <- sub("mean/(/)","mean",col_names)
col_names
col_names <- sub("mean(.*)","mean",col_names)
col_names
rm(list=ls())
setwd(../)
setwd("../")
getwd()
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
foo <- read.table("features.txt")
list.files()
rm(list=ls())
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
getwd()
read.table("features.txt")
foo <-read.table("features.txt")
foo
barm <- grep("-mean()-",foo)
barm <- grep("mean()",foo,fixed = TRUE)
barm
barm <- grep("mean//(//)",foo)
barm <- grep("mean\\(\\)",foo)
rm(barm)
foo
?grep
barm <- grep("mean//(//)",foo)
barm <- grep("mean()",foo)
barm <- grep("(.*)mean()",foo)
foo <- foo[, 2]
foo
barm <- grep("mean//(//)",foo)
barm <- grep("mean\\(\\)",foo)
barm
barm <- grep("mean\\(\\)|std\\(\\)",foo)
barm
rm(list=ls())
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
getwd()
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
etwd()
getwd
getwd()
col_names
columns
debugSource('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
setwd("../")
debugSource('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
rm(list=ls())
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
getwd()
setwd("../")
getwd()
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
getwd()
col_names
columns
rm(list=ls())
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
col_names
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
rm(list=ls())
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
rm(list=ls())
getwd
getwd()
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
features
feature_names
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
feature_names
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
feature_names
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
feature_names
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
feature_names
setwd("../")
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
foo <- read.table("tidy_data.txt",header = TRUE)
foo
foo <- tbl_df(foo)
foo
feature_names
names(tidy_data)
tidy_dataset
tidy_data
rm(list=ls())
source('~/Desktop/ml/coursera_gettingcleaningdata/GettingCleaningData_project/run_analysis.R')
